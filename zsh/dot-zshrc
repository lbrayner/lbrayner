# vim:ft=zsh
# http://zsh.sourceforge.net/Doc/Release/Parameters.html

HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
KEYTIMEOUT=1

autoload -Uz compinit
compinit

# emacs mode initially
bindkey -e

# http://zsh.sourceforge.net/Doc/Release/Options.html

setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt GLOB_COMPLETE
setopt complete_aliases
setopt extended_glob

# Sourcing files

function source_file(){
    if [[ -f ${1} ]]
    then
        source ${1}
    fi
}

# setting aliases
source_file ~/.zsh-alias

# setting local aliases
source_file ~/.zsh-alias.local

# GNU ls colors
if [[ $(uname) == Linux || $(uname) =~ CYGWIN ]]
then
    source_file ~/.zsh-colors
fi

# https://stackoverflow.com/a/15394738
# will not clobber fpath
local_functions=$HOME/.zfunc/functions
if [[ ! " ${fpath[@]} " =~ " ${local_functions} " ]]
then
    fpath=( "${local_functions}" "${fpath[@]}" )
fi

# zle, The Z-Shell Line Editor: http://zsh.sourceforge.net/Guide/zshguide04.html
# http://zsh.sourceforge.net/Doc/Release/Functions.html#Functions

### Widgets ###

autoload -Uz copy-earlier-word
zle -N copy-earlier-word

autoload -Uz smart-insert-last-word
zle -N insert-last-word smart-insert-last-word

function emacs-backward-kill-word () {
    WORDCHARS='' zle backward-kill-word
}

zle -N emacs-backward-kill-word

function emacs-backward-word () {
    WORDCHARS='' zle backward-word
}

zle -N emacs-backward-word

function emacs-forward-word () {
    WORDCHARS='' zle forward-word
}

zle -N emacs-forward-word

function expand-alias() {
    zle _expand_alias
    zle expand-word
}

zle -N expand-alias

autoload -Uz insert-newest-file
zle -N insert-newest-file

# Key bindings

bindkey '^[m'     copy-earlier-word
bindkey '^[.'     insert-last-word
bindkey '^[^?'    emacs-backward-kill-word
bindkey '^[[1;2D' emacs-backward-word
bindkey '^[[1;2C' emacs-forward-word
bindkey '^ '      expand-alias
bindkey '^[;'     insert-newest-file

# DELETE, HOME & END keys

bindkey '\e[3~' delete-char
bindkey '\e[P'  delete-char
bindkey '\e[1~' beginning-of-line
bindkey '\e[H'  beginning-of-line
bindkey '\e[4~' end-of-line

###                  ###
### The basic prompt ###
###                  ###

setopt prompt_subst

# https://github.com/wincent/wincent
# http://zsh.sourceforge.net/Doc/Release/User-Contributions.html
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git hg svn
zstyle ':vcs_info:git*:*' formats '[%b%m%c%u] ' # default ' (%s)-[%b]%c%u-'
zstyle ':vcs_info:git*:*' actionformats '[%b|%a%m%c%u] ' # default ' (%s)-[%b|%a]%c%u-'
zstyle ':vcs_info:svn*:*' formats '[%b%m] ' # default ' (%s)-[%b]%c%u-'
zstyle ':vcs_info:svn*:*' actionformats '[%b|%a%m] ' # default ' (%s)-[%b|%a]%c%u-'
vcs_info

# https://github.com/wincent/wincent
# http://zsh.sourceforge.net/Doc/Release/Parameters.html#Array-Parameters
# Create a hash table for globally stashing variables without polluting main
# scope with a bunch of identifiers.
typeset -A __ZSH

# https://github.com/wincent/wincent
# Remember each command we run.
function record-last-command () {
    __ZSH[LAST_COMMAND]="${2}"
}

autoload -Uz add-zsh-hook
add-zsh-hook preexec record-last-command

# https://github.com/wincent/wincent
# Update vcs_info (slow) after any command that probably changed it.
function maybe_show_vcs_info () {
    local last="${__ZSH[LAST_COMMAND]}"

    # In case user just hit enter, overwrite LAST_COMMAND, because preexec
    # won't run and it will otherwise linger.
    __ZSH[LAST_COMMAND]="<unset>"

    # Check first word; via:
    # http://tim.vanwerkhoven.org/post/2012/10/28/ZSH/Bash-string-manipulation

    case "$last[(w)1]" in
      cd|cp|git|svn|rm|touch|mv)
          vcs_info
          ;;
      *)
          ;;
    esac
}

# http://aperiodic.net/phil/prompt/
# See if we can use extended characters to look nicer.

# Conditional Substrings in Prompts: %(x.true-text.false-text)
__ZSH[PROMPT_INFO]='%n@%M%(1j. (%j).): ${vcs_info_msg_0_}%B${__ZSH[CWD]}%b'

# Simpler mode for basic ttys
# or if SSH but not TMUX
if [[ "${TERM#*256}" == "${TERM}" ]] || ([[ -n "${SSH_TTY}" ]] && [[ -z "${TMUX}" ]])
then
    add-zsh-hook precmd maybe_show_vcs_info
    __ZSH[CWD]="%1d"
    PROMPT="${__ZSH[PROMPT_INFO]}\$ "
    RPROMPT=
    return
fi

###                     ###
### The advanced prompt ###
###                     ###

typeset -A ALTCHAR

# Substitutions: http://zsh.sourceforge.net/Guide/zshguide05.html
# http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion
# Parameter Expansion: s:string:
set -A ALTCHAR ${(s..)terminfo[acsc]}
# On PuTTY, don't forget to tick "Enable VT100 line drawing even in UTF-8 mode"
# at Window -> Translation for these special characters to be drawn correctly

# http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
# %{...%} Include a string as a literal escape sequence
__ZSH[SET_CHARSET]="%{$terminfo[enacs]%}"
__ZSH[SHIFT_IN]="%{$terminfo[smacs]%}"
__ZSH[SHIFT_OUT]="%{$terminfo[rmacs]%}"
# Parameter Expansion: ${name:-word}
__ZSH[ULCORNER]=${__ZSH[SET_CHARSET]}${__ZSH[SHIFT_IN]}${ALTCHAR[l]:--}${__ZSH[SHIFT_OUT]}
__ZSH[LLCORNER]=${__ZSH[SET_CHARSET]}${__ZSH[SHIFT_IN]}${ALTCHAR[m]:--}${__ZSH[SHIFT_OUT]}

# Upper Left prompt

__ZSH[PROMPT_INFO_NO_CWD]='%n@%M%(1j. (%j).): ${vcs_info_msg_0_}'

function set_prompt() {
    maybe_show_vcs_info

    local cwdes='%~'
    __ZSH[CWD]="${(%)cwdes}"

    # Parameter Expansion Flags: parameter expansion, command substitution and
    # arithmetic expansion
    local prompt_contents_no_cwd="${(e%)__ZSH[PROMPT_INFO_NO_CWD]}"
    # length of scalar
    local prompt_size
    (( prompt_size=${#prompt_contents_no_cwd} + ${#__ZSH[CWD]} ))
    local max_width
    # __ZSH[ULCORNER] is 1 character wide
    (( max_width=${COLUMNS} - 1 - 1 )) # a 1 column margin

    if [[ ${prompt_size} -gt ${max_width} ]]
    then
        local max_length
        (( max_length=${max_width} - ${#prompt_contents_no_cwd} ))
        local head="${__ZSH[CWD]%/*}"
        local tail="${__ZSH[CWD]##*/}"
        local head_max_length
        (( head_max_length = ${max_length}-${#tail}-1-3 ))
        local truncated_head="${head:0:${head_max_length}}"
        __ZSH[CWD]="${truncated_head}.../${tail}"
    fi
}

add-zsh-hook precmd set_prompt

# Setting the PROMPT variable
PROMPT='${__ZSH[ULCORNER]}'"${__ZSH[PROMPT_INFO]}"\
$'\n${__ZSH[LLCORNER]}$ '

###         ###
### Vi Mode ###
###         ###

# print: http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html
# https://superuser.com/a/911665/750142

# https://vi.stackexchange.com/a/14203
# tmux: DCS sequence
function steady_ibeam (){
    # Do nothing on TMUX
    [[ -n "${TMUX}" ]] && return
    print -Pn "\e[6 q"
}

function steady_block (){
    # Do nothing on TMUX
    [[ -n "${TMUX}" ]] && return
    print -Pn "\e[2 q"
}

# http://zsh.sourceforge.net/Doc/Release/Functions.html#Hook-Functions
function preexec (){
    steady_block
}

### RPROMPT ###

__ZSH[INSERT]="-- INSERT --"
__ZSH[NORMAL]="[NORMAL]"

function rprompt_cmd (){
    [[ -n "${TMUX}" ]] && RPROMPT="${__ZSH[NORMAL]}"
}

function rprompt_insert (){
    [[ -n "${TMUX}" ]] && RPROMPT="${__ZSH[INSERT]}"
}

rprompt_insert

function zle-line-init zle-keymap-select () {
    if [[ $KEYMAP = vicmd ]]
    then
        # vi command mode
        steady_block
        rprompt_cmd
    else
        # vi insert mode
        steady_ibeam
        rprompt_insert
    fi

    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select

# http://zsh.sourceforge.net/Doc/Release/Functions.html
# 9.3.2 Trap Functions
# The SIGWINCH signal is sent to a process when its controlling
# terminal changes its size (a window change).
TRAPWINCH(){
    # So that the cursor doesn't revert to a block
    zle && zle zle-keymap-select
}

### Vi Mode per se  ###

bindkey -v

# More widgets

# https://github.com/wincent/wincent
# Make CTRL-Z background things and unbackground them.
function fg-bg() {
    if [[ $#BUFFER -eq 0 ]]; then
        fg
    else
        zle push-input
    fi
}
zle -N fg-bg

# Vi Mode key bindings and handling keymaps

bindkey '^[;'     insert-newest-file
bindkey '^[.'     insert-last-word
bindkey '^[m'     copy-earlier-word
bindkey '^[d'     kill-word
bindkey '^P'      up-history
bindkey '^N'      down-history
bindkey '^?'      backward-delete-char
bindkey '^h'      backward-delete-char
bindkey '^w'      backward-kill-word
bindkey '^u'      backward-kill-line
bindkey '^r'      history-incremental-search-backward
bindkey '^k'      kill-line
bindkey '^z'      fg-bg
bindkey '^[^?'    emacs-backward-kill-word
bindkey '^[Od'    backward-word
bindkey '^[Oc'    forward-word
bindkey '^[f'     forward-word
bindkey '^a'      beginning-of-line
bindkey '^d'      delete-char
bindkey '^e'      end-of-line
bindkey '^[OD'    backward-word
bindkey '^[b'     backward-word
bindkey '^[OC'    forward-word
bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word
bindkey '^[[1;2D' emacs-backward-word
bindkey '^[[1;2C' emacs-forward-word
bindkey '^ '      expand-alias

# DELETE, HOME & END keys

## Insert mode bindings
bindkey '\e[3~' delete-char
bindkey '\e[P'  delete-char
bindkey '\e[1~' beginning-of-line
bindkey '\e[H'  beginning-of-line
bindkey '\e[4~' end-of-line

## Normal mode bindings
bindkey -a '\e[3~' delete-char
bindkey -a '\e[P'  delete-char
bindkey -a '\e[1~' beginning-of-line
bindkey -a '\e[H'  beginning-of-line
bindkey -a '\e[4~' end-of-line

###                     ###
### Syntax highlighting ###
###                     ###

if [[ $(uname) == Linux ]]
then
    source_file /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

if [[ $(uname) =~ BSD ]]
then
    source_file /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi
